// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: manager.proto

package managerpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _manager_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmptyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Role) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetRoleName()) < 1 {
		return RoleValidationError{
			field:  "RoleName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for CreateAt

	// no validation rules for RoleStatus

	return nil
}

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on GetRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRoleListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetRoleListResponseValidationError is the validation error returned by
// GetRoleListResponse.Validate if the designated constraints aren't met.
type GetRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleListResponseValidationError) ErrorName() string {
	return "GetRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleListResponseValidationError{}

// Validate checks the field values on RoleId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RoleId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return RoleIdValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// RoleIdValidationError is the validation error returned by RoleId.Validate if
// the designated constraints aren't met.
type RoleIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleIdValidationError) ErrorName() string { return "RoleIdValidationError" }

// Error satisfies the builtin error interface
func (e RoleIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleIdValidationError{}

// Validate checks the field values on RoleBindMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RoleBindMenuRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoleId

	return nil
}

// RoleBindMenuRequestValidationError is the validation error returned by
// RoleBindMenuRequest.Validate if the designated constraints aren't met.
type RoleBindMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleBindMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleBindMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleBindMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleBindMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleBindMenuRequestValidationError) ErrorName() string {
	return "RoleBindMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleBindMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleBindMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleBindMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleBindMenuRequestValidationError{}

// Validate checks the field values on GetRoleBindMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRoleBindMenuResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// GetRoleBindMenuResponseValidationError is the validation error returned by
// GetRoleBindMenuResponse.Validate if the designated constraints aren't met.
type GetRoleBindMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleBindMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleBindMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleBindMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleBindMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleBindMenuResponseValidationError) ErrorName() string {
	return "GetRoleBindMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleBindMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleBindMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleBindMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleBindMenuResponseValidationError{}

// Validate checks the field values on AccountBindRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccountBindRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	return nil
}

// AccountBindRoleRequestValidationError is the validation error returned by
// AccountBindRoleRequest.Validate if the designated constraints aren't met.
type AccountBindRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountBindRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountBindRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountBindRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountBindRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountBindRoleRequestValidationError) ErrorName() string {
	return "AccountBindRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountBindRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountBindRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountBindRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountBindRoleRequestValidationError{}

// Validate checks the field values on AccountId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AccountId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return AccountIdValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// AccountIdValidationError is the validation error returned by
// AccountId.Validate if the designated constraints aren't met.
type AccountIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIdValidationError) ErrorName() string { return "AccountIdValidationError" }

// Error satisfies the builtin error interface
func (e AccountIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIdValidationError{}

// Validate checks the field values on GetAccountBindRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountBindRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	return nil
}

// GetAccountBindRoleResponseValidationError is the validation error returned
// by GetAccountBindRoleResponse.Validate if the designated constraints aren't met.
type GetAccountBindRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountBindRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountBindRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountBindRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountBindRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountBindRoleResponseValidationError) ErrorName() string {
	return "GetAccountBindRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountBindRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountBindRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountBindRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountBindRoleResponseValidationError{}

// Validate checks the field values on GetAccountMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountMenuResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountMenuResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAccountMenuResponseValidationError is the validation error returned by
// GetAccountMenuResponse.Validate if the designated constraints aren't met.
type GetAccountMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountMenuResponseValidationError) ErrorName() string {
	return "GetAccountMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountMenuResponseValidationError{}

// Validate checks the field values on MenuInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MenuInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for MenuName

	// no validation rules for MenuRouter

	// no validation rules for ParentId

	// no validation rules for MenuIcon

	// no validation rules for CreateAt

	// no validation rules for MenuStatus

	return nil
}

// MenuInfoValidationError is the validation error returned by
// MenuInfo.Validate if the designated constraints aren't met.
type MenuInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuInfoValidationError) ErrorName() string { return "MenuInfoValidationError" }

// Error satisfies the builtin error interface
func (e MenuInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuInfoValidationError{}

// Validate checks the field values on CreateMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMenuRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetMenuName()) < 1 {
		return CreateMenuRequestValidationError{
			field:  "MenuName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for MenuRouter

	// no validation rules for ParentId

	// no validation rules for MenuIcon

	return nil
}

// CreateMenuRequestValidationError is the validation error returned by
// CreateMenuRequest.Validate if the designated constraints aren't met.
type CreateMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuRequestValidationError) ErrorName() string {
	return "CreateMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuRequestValidationError{}

// Validate checks the field values on GetMenuListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMenuListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMenuListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetMenuListResponseValidationError is the validation error returned by
// GetMenuListResponse.Validate if the designated constraints aren't met.
type GetMenuListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuListResponseValidationError) ErrorName() string {
	return "GetMenuListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMenuListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuListResponseValidationError{}

// Validate checks the field values on MenuId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MenuId) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return MenuIdValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// MenuIdValidationError is the validation error returned by MenuId.Validate if
// the designated constraints aren't met.
type MenuIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuIdValidationError) ErrorName() string { return "MenuIdValidationError" }

// Error satisfies the builtin error interface
func (e MenuIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuIdValidationError{}

// Validate checks the field values on UpdateMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateMenuRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return UpdateMenuRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	if utf8.RuneCountInString(m.GetMenuName()) < 1 {
		return UpdateMenuRequestValidationError{
			field:  "MenuName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for MenuRouter

	// no validation rules for ParentId

	// no validation rules for MenuIcon

	// no validation rules for MenuStatus

	return nil
}

// UpdateMenuRequestValidationError is the validation error returned by
// UpdateMenuRequest.Validate if the designated constraints aren't met.
type UpdateMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuRequestValidationError) ErrorName() string {
	return "UpdateMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuRequestValidationError{}
